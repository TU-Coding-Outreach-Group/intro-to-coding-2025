l_cem_ahipp = corr_df_l_matrix[4,6],
l_cem_phipp = corr_df_l_matrix[4,7],
l_cem_aphc = corr_df_l_matrix[4,8],
l_cem_pphc = corr_df_l_matrix[4,9],
l_cem_ppa = corr_df_l_matrix[4,10],
l_cem_prc = corr_df_l_matrix[4,11],
l_cem_precuneus = corr_df_l_matrix[4,12],
l_cem_v1 = corr_df_l_matrix[4,13],
l_cem_vmpfc = corr_df_l_matrix[4,14],
l_ffa_ahipp = corr_df_l_matrix[5,6],
l_ffa_phipp = corr_df_l_matrix[5,7],
l_ffa_ahpc = corr_df_l_matrix[5,8],
l_ffa_phpc = corr_df_l_matrix[5,9],
l_ffa_ppa = corr_df_l_matrix[5,10],
l_ffa_prc = corr_df_l_matrix[5,11],
l_ffa_precuneus = corr_df_l_matrix[5,12],
l_ffa_v1 = corr_df_l_matrix[5,13],
l_ffa_vmpfc = corr_df_l_matrix[5,14],
l_ahipp_phipp = corr_df_l_matrix[6,7],
l_ahipp_aphc = corr_df_l_matrix[6,8],
l_ahipp_pphc = corr_df_l_matrix[6,9],
l_ahipp_ppa = corr_df_l_matrix[6,10],
l_ahipp_prc = corr_df_l_matrix[6,11],
l_ahipp_precuneus = corr_df_l_matrix[6,12],
l_ahipp_v1 = corr_df_l_matrix[6,13],
l_ahipp_vmpfc = corr_df_l_matrix[6,14],
l_phipp_aphc = corr_df_l_matrix[7,8],
l_phipp_pphc = corr_df_l_matrix[7,9],
l_phipp_ppa = corr_df_l_matrix[7,10],
l_phipp_prc = corr_df_l_matrix[7,11],
l_phipp_precuneus = corr_df_l_matrix[7,12],
l_phipp_v1 = corr_df_l_matrix[7,13],
l_phipp_vmpfc = corr_df_l_matrix[7,14],
l_aphc_pphc = corr_df_l_matrix[8,9],
l_aphc_ppa = corr_df_l_matrix[8,10],
l_aphc_prc = corr_df_l_matrix[8,11],
l_aphc_precuneus = corr_df_l_matrix[8,12],
l_aphc_v1 = corr_df_l_matrix[8,13],
l_aphc_vmpfc = corr_df_l_matrix[8,14],
l_pphc_ppa = corr_df_l_matrix[9,10],
l_pphc_prc = corr_df_l_matrix[9,11],
l_pphc_precuneus = corr_df_l_matrix[9,12],
l_pphc_v1 = corr_df_l_matrix[9,13],
l_pphc_vmpfc = corr_df_l_matrix[9,14],
l_ppa_prc = corr_df_l_matrix[10,11],
l_ppa_precuneus = corr_df_l_matrix[10,12],
l_ppa_v1 = corr_df_l_matrix[10,13],
l_ppa_vmpfc = corr_df_l_matrix[10,14],
l_prc_precuneus = corr_df_l_matrix[11,12],
l_prc_v1 = corr_df_l_matrix[11,13],
l_prc_vmpfc = corr_df_l_matrix[11,14],
l_precuneus_v1 = corr_df_l_matrix[12,13],
l_precuneus_vmpfc = corr_df_l_matrix[12,14],
l_v1_vmpfc = corr_df_l_matrix[13,14],
r_a1_amy = corr_df_r_matrix[1,2],
r_a1_bla = corr_df_r_matrix[1,3],
r_a1_cem = corr_df_r_matrix[1,4],
r_a1_ffa = corr_df_r_matrix[1,5],
r_a1_ahipp = corr_df_r_matrix[1,6],
r_a1_phipp = corr_df_r_matrix[1,7],
r_a1_aphc = corr_df_r_matrix[1,8],
r_a1_pphc = corr_df_r_matrix[1,9],
r_a1_ppa = corr_df_r_matrix[1,10],
r_a1_prc = corr_df_r_matrix[1,11],
r_a1_precuneus = corr_df_r_matrix[1,12],
r_a1_v1 = corr_df_r_matrix[1,13],
r_a1_vmpfc = corr_df_r_matrix[1,14],
r_amy_bla = corr_df_r_matrix[2,3],
r_amy_cem = corr_df_r_matrix[2,4],
r_amy_ffa = corr_df_r_matrix[2,5],
r_amy_ahipp = corr_df_r_matrix[2,6],
r_amy_phipp = corr_df_r_matrix[2,7],
r_amy_aphc = corr_df_r_matrix[2,8],
r_amy_pphc = corr_df_r_matrix[2,9],
r_amy_ppa = corr_df_r_matrix[2,10],
r_amy_prc = corr_df_r_matrix[2,11],
r_amy_precuneus = corr_df_r_matrix[2,12],
r_amy_v1 = corr_df_r_matrix[2,13],
r_amy_vmpfc = corr_df_r_matrix[2,14],
r_bla_cem = corr_df_r_matrix[3,4],
r_bla_ffa = corr_df_r_matrix[3,5],
r_bla_ahipp = corr_df_r_matrix[3,6],
r_bla_phipp = corr_df_r_matrix[3,7],
r_bla_aphc = corr_df_r_matrix[3,8],
r_bla_pphc = corr_df_r_matrix[3,9],
r_bla_ppa = corr_df_r_matrix[3,10],
r_bla_prc = corr_df_r_matrix[3,11],
r_bla_precuneus = corr_df_r_matrix[3,12],
r_bla_v1 = corr_df_r_matrix[3,13],
r_bla_vmpfc = corr_df_r_matrix[3,14],
r_cem_ffa = corr_df_r_matrix[4,5],
r_cem_ahipp = corr_df_r_matrix[4,6],
r_cem_phipp = corr_df_r_matrix[4,7],
r_cem_aphc = corr_df_r_matrix[4,8],
r_cem_pphc = corr_df_r_matrix[4,9],
r_cem_ppa = corr_df_r_matrix[4,10],
r_cem_prc = corr_df_r_matrix[4,11],
r_cem_precuneus = corr_df_r_matrix[4,12],
r_cem_v1 = corr_df_r_matrix[4,13],
r_cem_vmpfc = corr_df_r_matrix[4,14],
r_ffa_ahipp = corr_df_r_matrix[5,6],
r_ffa_phipp = corr_df_r_matrix[5,7],
r_ffa_ahpc = corr_df_r_matrix[5,8],
r_ffa_phpc = corr_df_r_matrix[5,9],
r_ffa_ppa = corr_df_r_matrix[5,10],
r_ffa_prc = corr_df_r_matrix[5,11],
r_ffa_precuneus = corr_df_r_matrix[5,12],
r_ffa_v1 = corr_df_r_matrix[5,13],
r_ffa_vmpfc = corr_df_r_matrix[5,14],
r_ahipp_phipp = corr_df_r_matrix[6,7],
r_ahipp_aphc = corr_df_r_matrix[6,8],
r_ahipp_pphc = corr_df_r_matrix[6,9],
r_ahipp_ppa = corr_df_r_matrix[6,10],
r_ahipp_prc = corr_df_r_matrix[6,11],
r_ahipp_precuneus = corr_df_r_matrix[6,12],
r_ahipp_v1 = corr_df_r_matrix[6,13],
r_ahipp_vmpfc = corr_df_r_matrix[6,14],
r_phipp_aphc = corr_df_r_matrix[7,8],
r_phipp_pphc = corr_df_r_matrix[7,9],
r_phipp_ppa = corr_df_r_matrix[7,10],
r_phipp_prc = corr_df_r_matrix[7,11],
r_phipp_precuneus = corr_df_r_matrix[7,12],
r_phipp_v1 = corr_df_r_matrix[7,13],
r_phipp_vmpfc = corr_df_r_matrix[7,14],
r_aphc_pphc = corr_df_r_matrix[8,9],
r_aphc_ppa = corr_df_r_matrix[8,10],
r_aphc_prc = corr_df_r_matrix[8,11],
r_aphc_precuneus = corr_df_r_matrix[8,12],
r_aphc_v1 = corr_df_r_matrix[8,13],
r_aphc_vmpfc = corr_df_r_matrix[8,14],
r_pphc_ppa = corr_df_r_matrix[9,10],
r_pphc_prc = corr_df_r_matrix[9,11],
r_pphc_precuneus = corr_df_r_matrix[9,12],
r_pphc_v1 = corr_df_r_matrix[9,13],
r_pphc_vmpfc = corr_df_r_matrix[9,14],
r_ppa_prc = corr_df_r_matrix[10,11],
r_ppa_precuneus = corr_df_r_matrix[10,12],
r_ppa_v1 = corr_df_r_matrix[10,13],
r_ppa_vmpfc = corr_df_r_matrix[10,14],
r_prc_precuneus = corr_df_r_matrix[11,12],
r_prc_v1 = corr_df_r_matrix[11,13],
r_prc_vmpfc = corr_df_r_matrix[11,14],
r_precuneus_v1 = corr_df_r_matrix[12,13],
r_precuneus_vmpfc = corr_df_r_matrix[12,14],
r_v1_vmpfc = corr_df_r_matrix[13,14]
)
#Bind new row to empty data frame
df <- rbind(df, newrow)
}
View(df)
View(df)
View(df)
penguins <- palmerpenguins::penguins
View(penguins)
penguins <- palmerpenguins::penguins
write.csv(penguins, "/Users/tuh20985/Desktop/penguins.csv")
penguins_raw <- palmerpenguins::penguins
View(penguins_raw)
penguins_raw <- palmerpenguins::penguins_raw
View(penguins_raw)
penguins <- palmerpenguins::penguins
write.csv(penguins, "/Users/tuh20985/Desktop/penguins.csv")
penguins_raw <- palmerpenguins::penguins_raw
write.csv(penguins_raw, "/Users/tuh20985/Desktop/penguins_raw.csv")
?penguins
library(tidyverse)
library(report)
library(lme4)
library(ggplot2)
getwd() #get your current working directory
Path <- "/Users/tuh20985/Documents/GitHub/intro-to-coding-2025/data/"
setwd(Path) #use the setwd() function to assign the "Path" object that we created earlier as the working directory
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
rm(list=ls())
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
Path <- "/Users/tuh20985/Documents/GitHub/intro-to-coding-2025/data/"
head(penguins) #will show you a subset of rows within the Data Frame
View(penguins) #will open up the full data frame like you would in Excel
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
head(penguins) #will show you a subset of rows within the Data Frame
View(penguins) #will open up the full data frame like you would in Excel
test <- palmerpenguins::penguins
View(test)
glimpse(penguins)
penguins$species
penguins$species[2]
penguins_biscoe <- penguins %>%
filter(island == "Biscoe")
View(penguins)
penguins_adelie <- penguins %>%
filter(species == "Adelie")
penguins_adelie_biscoe <- penguins %>%
filter(species == "Adelie" & island == "Biscoe")
penguins_raw <- read.csv(file = "penguins_raw.csv") #Load in the penguins_raw CSV file and store it in a data frame called "penguins_raw"
penguins_raw <- read.csv(file = "penguins_raw.csv") #Load in the penguins_raw CSV file and store it in a data frame called "penguins_raw"
View(penguins_raw)
penguins_length <- penguins_merged %>%
select(species, bill_length_mm, flipper_length_mm, culmen_length_mm)
penguins_merged <- merge(penguins, penguins_raw, by=c("species", "island", "flipper_length_mm", "body_mass_g", "sex"))
penguins_length <- penguins_merged %>%
select(species, bill_length_mm, flipper_length_mm, culmen_length_mm)
penguins_long <- penguins_length %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm", "culmen_length_mm"), #The names of the columns to pivot
names_to = "measure", #The name for the new character column
values_to = "length") #The name for the new values column
View(penguins_long)
View(penguins_long)
penguins_wide <- penguins_long %>% pivot_wider(names_from = measure, #names_from: The column whose values will be used as column names
values_from = length) #values_from: The column whose values will be used as cell values
View(penguins_wide)
View(penguins_long)
View(penguins_wide)
#Pivot wider
penguins_wide <- penguins_long %>% distinct() %>%
pivot_wider(names_from = measure, #names_from: The column whose values will be used as column names
values_from = length) #values_from: The column whose values will be used as cell values
penguins_long %>% distinct()
View(penguins_long)
penguins_long <- penguins_long[1:12,]
View(penguins_long)
penguins_wide <- penguins_long %>%
pivot_wider(names_from = measure, #names_from: The column whose values will be used as column names
values_from = length) #values_from: The column whose values will be used as cell values
View(penguins_long)
penguins_long <- penguins_length %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm", "culmen_length_mm"), #The names of the columns to pivot
names_to = "measure", #The name for the new character column
values_to = "length") #The name for the new values column
penguins_long <- penguins_long %>% mutate(id = row_number())
View(penguins_long)
penguins_wide <- penguins_long %>%
pivot_wider(names_from = measure, #names_from: The column whose values will be used as column names
values_from = length) #values_from: The column whose values will be used as cell values
View(penguins_wide)
penguin_pivot_exercise <- penguins_merged %>%
select(species, bill_length_mm, bill_depth_mm)
View(penguin_pivot_exercise)
penguins_long <- penguins_length %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm", "culmen_length_mm"), #The names of the columns to pivot
names_to = "measure", #The name for the new character column
values_to = "length") #The name for the new values column
penguins_long <- penguins_long %>% mutate(ID = row_number())
penguins_wide <- penguins_long %>%
pivot_wider(names_from = measure, #names_from: The column whose values will be used as column names
values_from = length) #values_from: The column whose values will be used as cell values
View(penguins_wide)
penguin_pivot_exercise <- penguins_merged %>%
select(species, bill_length_mm, bill_depth_mm)
View(penguin_pivot_exercise)
View(penguins_merged)
penguins_merged <- merge(penguins, penguins_raw, by=c("species", "island", "flipper_length_mm", "body_mass_g", "sex"))
penguins_merged <- merge(penguins, penguins_raw, by=c("species", "island", "flipper_length_mm", "body_mass_g", "sex"))
View(penguins_merged)
penguins_bill_length <- penguins %>%
select(sample_number, species, island, bill_length_mm)
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
head(penguins) #will show you a subset of rows within the Data Frame
View(penguins) #will open up the full data frame like you would in Excel
penguins_bill_length <- penguins %>%
select(sample_number, species, island, bill_length_mm)
colnames(penguins)
penguins_raw <- read.csv(file = "penguins_raw.csv") #Load in the penguins_raw CSV file and store it in a data frame called "penguins_raw"
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm", "body_mass_g", "sex"))
View(penguins_merged)
View(penguins)
View(penguins_raw)
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm", "body_mass_g", "sex"))
View(penguins_merged)
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island"))
View(penguins_merged)
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm"))
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm", "body_mass_g"))
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm", "body_mass_g", "sex"))
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm", "body_mass_g"))
View(penguins_merged)
View(penguins)
View(penguins_raw)
penguins_raw <- read.csv(file = "penguins_raw.csv") #Load in the penguins_raw CSV file and store it in a data frame called "penguins_raw"
penguins_merged <- merge(penguins, penguins_raw, by=c("sample_number", "species", "island", "flipper_length_mm", "body_mass_g", "sex"))
View(penguins_merged)
penguins_length <- penguins_merged %>%
select(sample_number, species, bill_length_mm, flipper_length_mm, culmen_length_mm)
penguins_long <- penguins_length %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm", "culmen_length_mm"), #The names of the columns to pivot
names_to = "measure", #The name for the new character column
values_to = "length") #The name for the new values column
View(penguins_long)
penguins_length <- penguins_merged %>%
select(sample_number, species, island, bill_length_mm, flipper_length_mm, culmen_length_mm)
penguins_long <- penguins_length %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm", "culmen_length_mm"), #The names of the columns to pivot
names_to = "measure", #The name for the new character column
values_to = "length") #The name for the new values column
View(penguins_long)
View(penguins_merged)
View(penguins_bill_length)
View(penguins_length)
penguins_length <- penguins_merged %>%
select(sample_number, species, island, bill_length_mm, flipper_length_mm, culmen_length_mm)
penguins_long <- penguins_length %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm", "culmen_length_mm"), #The names of the columns to pivot
names_to = "measure", #The name for the new character column
values_to = "length") #The name for the new values column
penguins_wide <- penguins_long %>%
pivot_wider(names_from = measure, #names_from: The column whose values will be used as column names
values_from = length) #values_from: The column whose values will be used as cell values
View(penguins_wide)
penguin_pivot_exercise <- penguins_merged %>%
select(sample_number, species, bill_length_mm, bill_depth_mm)
penguin_pivot_exercise_long <- penguin_pivot_exercise %>% pivot_longer(
cols=c("bill_length_mm", "bill_depth_mm"), #The names of the columns to pivot
names_to = "bill_measure", #The name for the new character column
values_to = "length") #The name for the new values column
View(penguin_pivot_exercise_long)
View(penguins_merged)
View(penguins_merged)
View(penguins_length)
View(penguins_length)
colnames(penguins_length)
penguins_length <- penguins_length %>% drop_na()
model1 <- t.test(x = penguins_length$flipper_length_mm[penguins_length$species == "Adelie"],
y = penguins_length$flipper_length_mm[penguins_length$species == "Gentoo"],
paired = FALSE,
alternative = "two.sided")
#Print the model results
model1
report(model1)
model1
model2 <- aov(bill_length_mm ~ species, data = penguins_length) #create ANOVA model and store in an object called model2
summary(model2)
report(model2)
m1 <- lm(flipper_length_mm ~ bill_length_mm, data = penguins_length) #create bivariate linear regression and store in an object called "m1"
summary(m1) #use summary() function to print summary for m1 bivariate linear model
report(m1)
ggplot(penguins_merged, aes(x=flipper_length_mm)) + geom_histogram()
ggplot(penguins_length, aes(x=flipper_length_mm)) + geom_histogram()
ggplot(penguins_length, aes(x=flipper_length_mm, fill=species)) + geom_histogram()
ggplot(penguins_length, aes(x=flipper_length_mm, fill=species)) + geom_histogram()
ggplot(penguins_length, aes(x = spcies, y = flipper_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(position=position_dodge(), stat="identity"))
ggplot(penguins_length, aes(x = spcies, y = flipper_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(stat="identity", width=0.5)
ggplot(penguins_length, aes(x = species, y = flipper_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(stat="identity", width=0.5)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
ggplot(penguins_length, aes(x = species, y = flipper_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(stat="identity")
penguins_length.se <- summarySE(penguins_length, measurevar="flipper_length_mm", groupvars=c("species"))
penguins_length.se
class(penguins_length.se)
ggplot(penguins_length, aes(x = species, y = flipper_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=flipper_length_mm-se, ymax=flipper_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2,                    # Width of the error bars
position=position_dodge(.9))
ggplot(penguins_length.se, aes(x = species, y = flipper_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=flipper_length_mm-se, ymax=flipper_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2,                    # Width of the error bars
position=position_dodge(.9))
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
penguins_length.se <- summarySE(penguins_length, measurevar="bill_length", groupvars=c("species"))
#We can print the new data frame that we created to see what information is stored there
print(penguins_length.se)
penguins_length.se <- summarySE(penguins_length, measurevar="bill_length_mm", groupvars=c("species"))
print(penguins_length.se)
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables we are interested in
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2,                    # Width of the error bars
position=position_dodge(.9))
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables using the penguins_length.se data frame
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2, # Define the width of the error bars
position=position_dodge(.9))
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables using the penguins_length.se data frame
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2, # Define the width of the error bars
position=position_dodge(.9)) +
geom_signif(comparisons = list(c("Adelie", "Chinstrap"), c("Adelie", "Gentoo")),
map_signif_level = TRUE, textsize = 6)
library(ggsignif)
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables using the penguins_length.se data frame
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2, # Define the width of the error bars
position=position_dodge(.9)) +
geom_signif(comparisons = list(c("Adelie", "Chinstrap"), c("Adelie", "Gentoo")),
map_signif_level = TRUE, textsize = 6)
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables using the penguins_length.se data frame
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2, # Define the width of the error bars
position=position_dodge(.9)) +
geom_signif(comparisons = list(c("Adelie", "Chinstrap")),
map_signif_level = TRUE, textsize = 6)
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables using the penguins_length.se data frame
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2, # Define the width of the error bars
position=position_dodge(.9)) +
geom_signif(comparisons = list(c("Adelie", "Chinstrap")),
test=anova, test.args = list(paired = FALSE)
map_signif_level = TRUE, textsize = 6)
ggplot(penguins_length.se, aes(x = species, y = bill_length_mm, fill = species)) + #Plot the variables using the penguins_length.se data frame
geom_bar(stat="identity") + #Use the geom_bar() function to generate a bar plot
geom_errorbar(aes(ymin=bill_length_mm-se, ymax=bill_length_mm+se), #Use the geom_errorbar() function to plot the standard error bars
width=.2, # Define the width of the error bars
position=position_dodge(.9)) +
geom_signif(comparisons = list(c("Adelie", "Chinstrap")),
test=anova, test.args = list(paired = FALSE),
map_signif_level = TRUE, textsize = 6)
ggplot(penguins_length, aes(x=bill_length_mm, y=flipper_length_mm)) + geom_point() +
geom_smooth(method=lm, color="black") +
theme(axis.title.x = element_text(size= 15, color="black"),
axis.title.y = element_text(size= 15, color="black"),
axis.text.x = element_text(size= 15, color="black"),
axis.text.y = element_text(size=15, color="black"))
ggplot(penguins_length, aes(x=bill_length_mm, y=flipper_length_mm)) + #Plot the variables we are interested in
geom_point() + #geom_point() is the function used to create scatter plots
geom_smooth(method=lm, color="black")  #Adds a linear regression line to your plot
#Step 2: Read the data into R
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
#Step 3: Subset the columns you are interested in using the select() function
penguins_flipper_length <- penguins %>%
select(sample_number, species, island, flipper_length_mm)
#Step 4: Clean your data and remove any rows with missing values
penguins_flipper_length <- penguins_flipper_length %>% drop_na()
View(penguins_flipper_length)
View(penguins_long)
View(penguins_long)
#Step 3: Subset the columns you are interested in using the select() function
penguins_length_pipeline <- penguins %>%
select(sample_number, species, island, flipper_length_mm, culmen_length_mm)
penguins_length_pipeline <- penguins %>%
select(sample_number, species, island, bill_length_mm, flipper_length_mm)
penguins_length_pipeline <- penguins_length_pipeline %>% drop_na()
#Step 2: Read the data into R
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
#Step 3: Subset the columns you are interested in using the select() function
penguins_length_pipeline <- penguins %>%
select(sample_number, species, island, bill_length_mm, flipper_length_mm)
#Step 4: Clean your data and remove any rows with missing values
penguins_length_pipeline <- penguins_length_pipeline %>% drop_na()
#Step 5: Pivot data frame from wide to long
penguins_pipeline_long <- penguins_length_pipeline %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm"), #The names of the columns to pivot
names_to = "anatomical_region", #The name for the new character column
values_to = "length") #The name for the new values column
View(penguins_pipeline_long)
penguins <- read.csv(file = "penguins.csv") #Load in the penguins CSV file and store it in a data frame called "penguins"
#Step 3: Subset the columns you are interested in using the select() function
penguins_length_pipeline <- penguins %>%
select(sample_number, species, island, bill_length_mm, flipper_length_mm)
#Step 5: Pivot data frame from wide to long
penguins_pipeline_long <- penguins_length_pipeline %>% pivot_longer(
cols=c("bill_length_mm", "flipper_length_mm"), #The names of the columns to pivot
names_to = "anatomical_region", #The name for the new character column
values_to = "length") #The name for the new values column
#Step 4: Clean your data and remove any rows with missing values
penguins_pipeline_long <- penguins_pipeline_long %>% drop_na()
#Run a t-test to determine whether bill length significantly differs from flipper length
model2 <- t.test(x = penguins_pipeline_long$length[penguins_pipeline_long$anatomical_region == "bill_length_mm"],
y = penguins_pipeline_long$length[penguins_pipeline_long$anatomical_region == "flipper_length_mm"],
paired = FALSE,
alternative = "two.sided")
penguins_pipeline_long.se <- summarySE(penguins_pipeline_long, measurevar="length", groupvars=c("anatomical_region"))
ggplot(penguins_pipeline_long.se, aes(x = anatomical_region, y = length, fill = anatomical_region)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=length-se, ymax=length+se),
width=.2,
position=position_dodge(.9))
install.packages("lme4", repos = "http://cran.us.r-project.org")
install.packages("lme4", repos = "http://cran.us.r-project.org")
library(lme4)
install.packages("lme4")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("lme4")
devtools::find_rtools()
install.packages("lme4",repos="http://r-forge.r-project.org")
