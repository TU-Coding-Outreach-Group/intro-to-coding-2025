x = 1
x + 2
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("palmer-penguins.csv")
# preview first five rows
df.head()
# preview last five rows
df.tail()
# print data
print(df)
# get information about the data (spoiler: notice the non-null count differences)
df.info()
# summary of variables
df.describe()
df['species']
df['species'].head()
df[['species', 'year']].head()
df_subset = df[['species', 'year']]
df_subset.head(10)
# select only data when island is Biscoe
df_subset = df[df['island'] == 'Biscoe']
df_subset.head(10)
# get a data frame of unique species, islands, and years
df_subset = df[['species','island','year']].drop_duplicates()
df_subset.head()
# get a data frame of unique species, islands, and years
df_subset = df.drop_duplicates(subset = ['species','island','year'])
df_subset.head()
# create new composite variable combining bill length and flipper length
df['bill_flipper_mm'] = df['bill_length_mm'] + df['flipper_length_mm']
df.head()
# we have some NaNs in new bill_flipper_mm variable
df_subset = df['bill_flipper_mm']
print(df_subset)
df_subset[df_subset.isna()].index
df.iloc[[3,271]].isna()
missing_indices = df[df.isna().any(axis=1)].index
# print
missing_indices
df.iloc[missing_indices].isna()
df_no_na = df.drop(index=missing_indices)
df_no_na = df.dropna()
df_no_na.info()
# set x
x = 10
# if / else
if x > 5:
print("x is less than 20")
else:
print("x is greater than 20")
# if / else with multiple conditions
if x < 5:
print("x is less than 5")
elif x < 20:
print("x is somewhere between 5 and 20")
else:
print("x is greater than 20")
# get median value
median_value = df_no_na['bill_flipper_mm'].median()
# show
median_value
# group penguin as "small" if bill_flipper_mm is below the median and "big" if above the median
df_no_na['bill_flipper_group'] = df_no_na.apply(lambda row: 'small' if
row['bill_flipper_mm'] <= median_value
else 'big', axis = 1)
df_no_na.head()
# group penguin as "small" if bill_flipper_mm is below the median and "big" if above the median
df_no_na['bill_flipper_group'] = df_no_na.apply(lambda row: 'small' if
row['bill_flipper_mm'] <= median_value
else 'big', axis = 1)
df_no_na.head()
import scipy
x = 1
x + 2
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy
df = pd.read_csv("palmer-penguins.csv")
# preview first five rows
df.head()
# preview last five rows
df.tail()
# print data
print(df)
# get information about the data (spoiler: notice the non-null count differences)
df.info()
# summary of variables
df.describe()
df['species']
df['species'].head()
df[['species', 'year']].head()
df_subset = df[['species', 'year']]
df_subset.head(10)
# select only data when island is Biscoe
df_subset = df[df['island'] == 'Biscoe']
df_subset.head(10)
# get a data frame of unique species, islands, and years
df_subset = df[['species','island','year']].drop_duplicates()
df_subset.head()
# get a data frame of unique species, islands, and years
df_subset = df.drop_duplicates(subset = ['species','island','year'])
df_subset.head()
# create new composite variable combining bill length and flipper length
df['bill_flipper_mm'] = df['bill_length_mm'] + df['flipper_length_mm']
df.head()
# we have some NaNs in new bill_flipper_mm variable
df_subset = df['bill_flipper_mm']
print(df_subset)
df_subset[df_subset.isna()].index
df.iloc[[3,271]].isna()
missing_indices = df[df.isna().any(axis=1)].index
# print
missing_indices
df.iloc[missing_indices].isna()
df_no_na = df.drop(index=missing_indices)
df_no_na = df.dropna()
df_no_na.info()
# set x
x = 10
# if / else
if x > 5:
print("x is less than 20")
else:
print("x is greater than 20")
# if / else with multiple conditions
if x < 5:
print("x is less than 5")
elif x < 20:
print("x is somewhere between 5 and 20")
else:
print("x is greater than 20")
# get median value
median_value = df_no_na['bill_flipper_mm'].median()
# show
median_value
# group penguin as "small" if bill_flipper_mm is below the median and "big" if above the median
df_no_na['bill_flipper_group'] = df_no_na.apply(lambda row: 'small' if
row['bill_flipper_mm'] <= median_value
else 'big', axis = 1)
df_no_na.head()
for index, row in df_no_na[0:5].iterrows():
print(f"Index: {index}, Length: {row['bill_flipper_mm']}, Group: {row['bill_flipper_group']}")
df_long = df_no_na.melt(id_vars = 'species', value_vars = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm'], var_name = 'measurement', value_name = 'values')
df_long.head()
View(df_long)
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats
df_long_anova = df_long[df_long['measurement'] == 'bill_length_mm']
adelie_anova = df_long_anova[df_long_anova['species'] == "Adelie"]
View(adelie_anova)
adelie_anova['values'],
stats.f_oneway(adelie_anova['values'], gentoo_anova['values'], chinstrap_anova['values'])
adelie_anova = df_long_anova[df_long_anova['species'] == "Adelie"]
gentoo_anova = df_long_anova[df_long_anova['species'] == "Gentoo"]
chinstrap_anova = df_long_anova[df_long_anova['species'] == "Chinstrap"]
# perform one-way ANOVA
stats.f_oneway(adelie_anova['values'], gentoo_anova['values'], chinstrap_anova['values'])
stats.ttest_ind(adelie_anova['values'], gentoo_anova['values'], equal_var = False)
df_long_reg = df_long[df_long['measurement'] == ['bill_length_mm', 'flipper_length_mm']]
df_long_reg = df_long.loc[(df_long['measurement'] == 'bill_length_mm') | (df_long['measurement'] == 'flipper_length_mm')]
View(df_long_reg)
df_reg_bill = df_long[df_long['measurement'] == 'bill_length_mm']
View(df_reg_bill)
df_reg_flipper = df_long[df_long['measurement'] == 'flipper_length_mm']
linregress(df_reg_flipper['values'], df_reg_bill['values'])
stats.linregress(df_reg_flipper['values'], df_reg_bill['values'])
# subset df_long to only include bill_length_mm and flipper_length_mm
df_reg_bill = df_long[df_long['measurement'] == 'bill_length_mm']
df_reg_flipper = df_long[df_long['measurement'] == 'flipper_length_mm']
# do regression (x = independent, y = dependent)
regression_result = stats.linregress(df_reg_flipper['values'], df_reg_bill['values'])
# print results
regression_result
# run t-test using species data frames from ANOVA
# assume unequal variances
ttest_result = stats.ttest_ind(adelie_anova['values'], gentoo_anova['values'], equal_var = False)
# print results
ttest_result
# subset df_long to only include bill_length_mm values
# remember our conditional subsetting from earlier!
df_long_anova = df_long[df_long['measurement'] == 'bill_length_mm']
# now create three data frames for each penguin species
adelie_anova = df_long_anova[df_long_anova['species'] == "Adelie"]
gentoo_anova = df_long_anova[df_long_anova['species'] == "Gentoo"]
chinstrap_anova = df_long_anova[df_long_anova['species'] == "Chinstrap"]
# perform one-way ANOVA
anova_result = stats.f_oneway(adelie_anova['values'], gentoo_anova['values'], chinstrap_anova['values'])
# print results
anova_result
plt.plot(x = df_reg_flipper['values'], y = df_reg_bill['values'], label = "data points")
plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
plt.legend()
plt.show()
View(df_reg_bill)
View(df_reg_flipper)
plt.plot(x = df_reg_flipper['values'], y = df_reg_bill['values'], label = "data points")
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
plt.legend()
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.plot(x, y, label = "data points")
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
plt.legend()
plt.show()
plt.plot(x, y, 'o', label = "data points")
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.plot(x, y, 'o', label = "data points")
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
plt.legend()
plt.show()
plt.plot(x, y, 'o', label = "species")
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
plt.legend()
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.plot(x, y, 'o')
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
plt.legend()
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.plot(x, y, 'o')
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
#plt.legend()
plt.show()
plt.plot(x, y, 'o')
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.plot(x, y)
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
#plt.legend()
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.plot(x, y, color = 'blue')
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
#plt.legend()
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.scatter(x, y, color = 'blue')
# plt.plot(x = df_reg_flipper['values'], regression_result.intercept + regression_result.slope*df_reg_flipper['values'], 'r', label = 'regression fitted line')
#plt.legend()
plt.show()
x = df_reg_flipper['values']
y = df_reg_bill['values']
plt.scatter(x, y, color = 'blue')
plt.show()
# get species bill_length_mm means, standard deviations, and species names
means = [adelie_anova['values'].mean(), chinstrap_anova['values'].mean(), gentoo_anova['values'].mean()]
sds = [adelie_anova['values'].std(), chinstrap_anova['values'].std(), gentoo_anova['values'].std()]
species = ['Adelie', 'Chinstrap', 'Gentoo']
# plot
plt.bar(species, means, yerr = sds, color = ['orange','purple','teal'])
plt.show()
plt.bar(species, means, yerr = sds, color = ['orange','purple','teal'])
plt.xlabl('Penguin Species')
plt.ylabel('Bill Length (mm)')
plt.title('Bill Length (mm) by Species')
plt.show()
plt.bar(species, means, yerr = sds, color = ['orange','purple','teal'], capsize = 5, edgecolor = 'black')
plt.xlabl('Penguin Species')
plt.ylabel('Bill Length (mm)')
plt.title('Bill Length (mm) by Species')
plt.show()
# subset df_long to only include bill_length_mm and flipper_length_mm
df_reg_bill = df_long[df_long['measurement'] == 'bill_length_mm']
df_reg_flipper = df_long[df_long['measurement'] == 'flipper_length_mm']
# do regression (x = independent, y = dependent)
slope, intercept, r_value, p_value, std_err = stats.linregress(df_reg_flipper['values'], df_reg_bill['values'])
# print slope and p-value
slope
p_value
print(f'Slope: {slope}, p-value: {p_value}')
print(f'slope: {slope}, p-value: {p_value}')
x = df_reg_flipper['values']
y_pred = slope * x + intercept
# calculate a predicted fitted line using regression equation (y = slope * x + intercept)
x = df_reg_flipper['values']
y = df_reg_bill['values']
y_pred = slope * x + intercept
plt.scatter(x, y, color = 'black', label = 'data points')
plt.plot(x, y_pred, color = 'red', label = f'fitted line: y = {slope:.2f}x + {intercept:.2f}')
plt.xlabl('Flipper Length (mm)')
plt.ylabel('Bill Length (mm)')
plt.title('Association Between Flipper and Bill Length')
plt.legend()
plt.show()
